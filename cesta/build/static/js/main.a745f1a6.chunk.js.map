{"version":3,"sources":["Room.js","App.js","serviceWorker.js","index.js"],"names":["HorizontalWithoutDoor","HorizontalWithDoor","VerticalWithoutDoor","VerticalWithDoor","PlayerInRoom","PlayerIsNotInRoom","NotRoom","TreasureRoom","Room","roomItem","gameMap","gameMapWidth","gameMapHeight","northRoomPositionX","positionX","northRoomPositionY","positionY","southRoomPositionX","southRoomPositionY","eastRoomPositionX","eastRoomPositionY","westRoomPositionX","westRoomPositionY","hasDoorInNorth","hasDoorInSouth","hasDoorInEast","hasDoorInWest","isRoom","content","map","rowItem","rowIndex","cellItem","cellIndex","className","style","display","App","useState","setGameMap","actualPositionOfPersonX","setActualPositionOfPersonX","actualPositionOfPersonY","setActualPositionOfPersonY","undefined","setGameMapWidth","setGameMapHeight","positionOfEndX","setPositionOfEndX","positionOfEndY","setPositionOfEndY","napisKonec","getContentInGameMap","whereX","whereY","ret","useEffect","tempGameMap","split","findPositionOfPersonInGameMapAndSetToState","length","findpostionOfEnd","console","log","handleMovePerson","rowIndexToChecked","cellIndexToChecked","isAllowedMove","newGameMap","isAcceptedDirectToMove","keyName","onKeyDown","e","key","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a745f1a6.chunk.js","sourcesContent":["import React from 'react';\n\t\nimport './App.css';\n\nfunction Room({roomItem, gameMap, gameMapWidth, gameMapHeight}) {\n\n\t// zjistit vlastnosti mistnost\n\t// kde jsou dvere?\n\nconst northRoomPositionX = roomItem.positionX;\nconst northRoomPositionY = roomItem.positionY - 1;\n\nconst southRoomPositionX = roomItem.positionX;\nconst southRoomPositionY = roomItem.positionY + 1;\n\nconst eastRoomPositionX = roomItem.positionX + 1;\nconst eastRoomPositionY = roomItem.positionY;\n\nconst westRoomPositionX = roomItem.positionX - 1;\nconst westRoomPositionY = roomItem.positionY;\n\n\n\t// console.log({roomItem, gameMap, gameMapHeight, gameMapWidth});\n\n\n\n\tlet hasDoorInNorth = false;\n\tlet hasDoorInSouth = false;\n\tlet hasDoorInEast = false;\n\tlet hasDoorInWest = false;\n\t\n\t\n\tconst imRoomAndSetToMeDoors = () => {\n\t\tgameMap.map((rowItem, rowIndex) => {\n\t\t\trowItem.map((cellItem, cellIndex) => {\n\t\t\t\tif (\n\t\t\t\t\trowIndex === northRoomPositionY\n\t\t\t\t\t&& cellIndex === northRoomPositionX\n\t\t\t\t\t&& isRoom(cellItem)\n\t\t\t\t\t&& rowIndex >= 0\n\t\t\t\t){\n\t\t\t\t\thasDoorInNorth = true;\n\t\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\trowIndex === southRoomPositionY\n\t\t\t\t\t&& cellIndex === southRoomPositionX\n\t\t\t\t\t&& isRoom(cellItem) \n\t\t\t\t\t&& rowIndex <= gameMapHeight\n\t\t\t\t){\n\t\t\t\t\thasDoorInSouth = true;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\trowIndex === eastRoomPositionY\n\t\t\t\t\t&& cellIndex === eastRoomPositionX\n\t\t\t\t\t&& isRoom(cellItem)\n\t\t\t\t\t&& cellIndex <= gameMapWidth\n\t\t\t\t){\n\t\t\t\t\thasDoorInEast = true;\n\t\t\t\t}\n\t\t\t\tif (\n\t\t\t\t\trowIndex === westRoomPositionY\n\t\t\t\t\t&& cellIndex === westRoomPositionX\n\t\t\t\t\t&& isRoom(cellItem)\n\t\t\t\t\t&& cellIndex >= 0\n\t\t\t\t){\n\t\t\t\t\thasDoorInWest = true;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t}\n\n\tconst isRoom = (content) => {\n\t\tif(content !== \" \") {\n\t\t\treturn true\n\t\t} else { return false}\n\t};\n\n\tif(roomItem.content === \"#\" || roomItem.content === \"@\" || roomItem.content === \"X\") {imRoomAndSetToMeDoors()}\n\telse {}\n\t\n\t\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"noWrap\">\n\t\t\t\t{hasDoorInNorth ? <HorizontalWithDoor /> : <HorizontalWithoutDoor />}\n\t\t\t</div>\n\t\t\t<div style={{display: \"flex\", }}>\n\t\t\t\t<span className=\"noWrap\">\n\t\t\t\t\t{hasDoorInWest ? <VerticalWithDoor /> : <VerticalWithoutDoor />}\n\t\t\t\t</span>\n\t\t\t\t<span className=\"noWrap\">\n\t\t\t\t\t{\n\t\t\t\t\t\t(roomItem.content === \"@\") ? <PlayerInRoom /> \n\t\t\t\t\t\t: (roomItem.content === \"#\") ? <PlayerIsNotInRoom />\n\t\t\t\t\t\t: (roomItem.content === \"X\") ? <TreasureRoom />\n\t\t\t\t\t\t: <NotRoom />\n\t\t\t\t\t}\n\t\t\t\t</span>\n\t\t\t\t<span className=\"noWrap\">\n\t\t\t\t\t{hasDoorInEast ? <VerticalWithDoor /> : <VerticalWithoutDoor />}\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t{hasDoorInSouth ? <HorizontalWithDoor /> : <HorizontalWithoutDoor />}\n\t\t\t</div>\n{/*\n\t\t\t{roomItem.content},<br />\n\t\t\tpozice mistnosti: {roomItem.positionX}, {roomItem.positionY}<br />\n\t\t\tpozice mistnosti na severu: {northRoomPositionX}, {northRoomPositionY}<br />\n\t\t\t<strong>mam na severu dvere? {hasDoorInNorth ? <span>ano</span> : <span>ne</span>}</strong><br />\n\t\t\tmam na jihu dvere? {hasDoorInSouth ? <span>ano</span> : <span>ne</span>}<br />\n\t\t\tmam na vychodu dvere? {hasDoorInEast ? <span>ano</span> : <span>ne</span>}<br />\n\t\t\tmam na zapade dvere? {hasDoorInWest ? <span>ano</span> : <span>ne</span>}\n*/}\n\n\t\t</div>\n\n\t)\n\n}\n\nfunction HorizontalWithoutDoor (){\n\treturn (<>###############</>);\n}\nfunction HorizontalWithDoor (){\n\treturn (<>#####<em>.....</em>#####</>);\n}\nfunction VerticalWithoutDoor (){\n\treturn (<>#<br />\n#<br />\n#<br />\n#<br />\n#</>);\n}\nfunction VerticalWithDoor (){\n\treturn (<>#<br />\n<em>.<br />\n.<br />\n.</em><br />\n#</>);\n}\nfunction PlayerInRoom (){\n\treturn (<><em>.............</em><br />     \n<em>......</em>o<em>......</em><br />\n<em>.....</em>-|-<em>.....</em><br />\n<em>.....</em>/<em>.</em>\\<em>.....</em><br />\n<em>.............</em></>);\n}\nfunction PlayerIsNotInRoom (){\n\treturn (<><em>.............<br />\n.............<br />\n.............<br />\n.............<br />\n.............</em></>);\n}\nfunction NotRoom (){\n\treturn (<>#############<br />     \n#############<br />\n#############<br />\n#############<br />\n#############</>);\n}\nfunction TreasureRoom (){\n\treturn (<><em>.............</em><br />     \n<em>.....</em>xxx<em>.....</em><br />\n<em>.....</em>xXx<em>.....</em><br />\n<em>.....</em>xxx<em>.....</em><br />\n<em>.............</em></>);\n}\n\n\n\n\t\nexport default Room;","import React,  {useState, useEffect} from 'react';\nimport './App.css';\nimport Room from './Room';\n\nimport Hotkeys from 'react-hot-keys';\n\n\nfunction App() {\n  const isEmpty = \" \";\n  const hasPerson = \"@\";\n  const theEnd = \"X\"\n  const path = \"#\"\n\n  \n  const [gameMap, setGameMap] = useState([[]]);\n  const [actualPositionOfPersonX, setActualPositionOfPersonX] = useState(0);\n  const [actualPositionOfPersonY, setActualPositionOfPersonY] = useState(0);\n  const [gameMapWidth, setGameMapWidth] = useState(undefined);\n  const [gameMapHeight, setGameMapHeight] = useState(undefined);\n  const [positionOfEndX, setPositionOfEndX] = useState(null);\n  const [positionOfEndY, setPositionOfEndY] = useState(null);\n  let napisKonec = \" \";\n\n\n\n//   const gamePlanInString = `@########  #\n//       #    #\n// ######### ##\n// ##   #     #\n// ##   ###X###`;\n  const gamePlanInString =`#@# #####  X\n# # #   #  #\n###  #######\n# ####   #  `\n\n//  const gamePlanInString = `####\n//@# X`;\n\n//   const gamePlanInString = `#\n// @`;\n\nconst getContentInGameMap = (whereX, whereY) => {\n   let ret = isEmpty;\n    gameMap.map((rowItem, rowIndex) => {\n      rowItem.map((cellItem, cellIndex) => {\n        if (whereX === cellIndex && whereY === rowIndex){\n          ret = cellItem;\n        }\n      });\n    });\n\n    return ret;\n  }\n\n  useEffect(() => {\n    let tempGameMap = gamePlanInString.split(\"\\n\");\n    tempGameMap = tempGameMap.map(rowItem => {\n      return rowItem.split(\"\");\n    });\n//    console.log(\"final tempGameMap\", tempGameMap);\n    setGameMap(tempGameMap);\n    findPositionOfPersonInGameMapAndSetToState(tempGameMap);\n\n    let tempHeight = 0;\n    let tempWidth = 0;\n    setGameMapWidth(tempGameMap[0].length);\n    setGameMapHeight(tempGameMap.length);\n    findpostionOfEnd(tempGameMap);\n\n  }, []);\n\n//  console.log(gamePlanInString);\n\n  const findPositionOfPersonInGameMapAndSetToState = (gameMap) => {\n    gameMap.map((rowItem, rowIndex) => {\n      rowItem.map((cellItem, cellIndex) => {\n        if(cellItem === \"@\") {\n          setActualPositionOfPersonX(cellIndex);\n          setActualPositionOfPersonY(rowIndex);\n        }\n      });\n    });\n  }\n\n\n  const findpostionOfEnd = (gameMap) => {\n    gameMap.map((rowItem, rowIndex) => {\n      rowItem.map((cellItem, cellIndex) => {\n        if(cellItem === \"X\") {\n          setPositionOfEndX(cellIndex);\n          setPositionOfEndY(rowIndex);\n          console.log(\"Tu!!!!!!!!!!!!!!!!!\")\n        }\n      });\n    });\n  }\n\n  if (positionOfEndX === actualPositionOfPersonX && positionOfEndY === actualPositionOfPersonY){\n//    console.log(\"Je to tam!!!!!!!!!!\")\n    napisKonec = \"Game Over\"\n  }\n\n\n  const handleMovePerson = (rowIndexToChecked, cellIndexToChecked, cellItem) => {\n    if(!isAllowedMove(rowIndexToChecked, cellIndexToChecked, cellItem)) {return;}\n\n    setActualPositionOfPersonX(cellIndexToChecked);\n    setActualPositionOfPersonY(rowIndexToChecked);\n    const newGameMap = gameMap.map((rowItem, rowIndex) => (\n      rowItem.map((cellItem, cellIndex) => {\n        if(rowIndexToChecked === rowIndex && cellIndexToChecked === cellIndex) {\n          return hasPerson;\n\n          } else if (cellItem === \"@\") {return \"#\"} \n          else  {return cellItem} \n      })\n    ));\n   setGameMap(newGameMap);\n\n  }\n\n  const handleMoveUp = (e) => {\n    handleMovePerson(actualPositionOfPersonY - 1, actualPositionOfPersonX, getContentInGameMap(actualPositionOfPersonX, actualPositionOfPersonY - 1));\n  }\n  const handleMoveDown = (e) => {\n    handleMovePerson(actualPositionOfPersonY + 1, actualPositionOfPersonX, getContentInGameMap(actualPositionOfPersonX, actualPositionOfPersonY + 1));\n  }\n  const handleMoveRight = (e) => {\n    handleMovePerson(actualPositionOfPersonY, actualPositionOfPersonX + 1, getContentInGameMap(actualPositionOfPersonX + 1, actualPositionOfPersonY));\n  }\n  const handleMoveLeft = (e) => {\n    handleMovePerson(actualPositionOfPersonY, actualPositionOfPersonX - 1, getContentInGameMap(actualPositionOfPersonX - 1, actualPositionOfPersonY));\n  }\n\n  const isAllowedMove = (rowIndexToChecked, cellIndexToChecked, cellItem) => {\n\n    return (\n      isAcceptedDirectToMove(rowIndexToChecked, cellIndexToChecked)\n      && (\n        cellItem === \"#\" || cellItem === \"X\"\n        )\n      );\n  }\n\n  const isAcceptedDirectToMove = (rowIndexToChecked, cellIndexToChecked) => {\n\n    return (\n    (\n        ( actualPositionOfPersonX - 1 === cellIndexToChecked || actualPositionOfPersonX + 1 === cellIndexToChecked )\n        && ( actualPositionOfPersonY === rowIndexToChecked )\n      )\n      || (\n        ( actualPositionOfPersonY - 1 === rowIndexToChecked || actualPositionOfPersonY + 1 === rowIndexToChecked )\n        && ( actualPositionOfPersonX === cellIndexToChecked )\n        )\n  \n      )\n\n  }\n\n/*\nconst isAcceptedToMoveWithArrow = (rowIndexToChecked, cellIndexToChecked, rowIndex, arrowUp, cellItem) => {\n\n\n    return (setActualPositionOfPersonY(rowIndex + 1)) (\n        (rowIndex >= 0\n        && (cellItem === \"#\" || cellItem === \"@\" || cellItem === \"X\"))\n      )\n  }\n  //return (<div>aaaaa</div>)\n*/\n  return (\n    <div className=\"App\">\n      <Hotkeys keyName=\"up,w\" onKeyDown={handleMoveUp} />\n      <Hotkeys keyName=\"down,s\" onKeyDown={handleMoveDown} />\n      <Hotkeys keyName=\"right,d\" onKeyDown={handleMoveRight} />\n      <Hotkeys keyName=\"left,a\" onKeyDown={handleMoveLeft} />\n\n{/*\n      <p>panacek je na pozici x={actualPositionOfPersonX}, y={actualPositionOfPersonY}</p>\n*/}\n\n      <p>{napisKonec}</p>\n        \n\n{/*\n        <table>\n          <tbody>\n            {gameMap.map((rowItem, rowIndex) => (<tr key={rowIndex}>\n              {rowItem.map((cellItem, cellIndex) => (\n                <td\n                  key={cellIndex}\n                  onClick={e=>handleMovePerson(rowIndex, cellIndex, cellItem)}\n                >\n                  <Room\n                    roomItem={{\n                      content: cellItem,\n                      positionX: cellIndex,\n                      positionY: rowIndex,\n                    }}\n                    {...{gameMap, gameMapWidth, gameMapHeight}}\n                  />\n                </td>\n              ))}\n            </tr>\n            ))}\n          </tbody>\n        </table>\n*/}\n\n            {gameMap.map((rowItem, rowIndex) => (<div key={rowIndex}>\n              {rowItem.map((cellItem, cellIndex) => (\n                (actualPositionOfPersonX === cellIndex && actualPositionOfPersonY === rowIndex)\n                ? \n                  <Room\n                    key={cellIndex}\n                    roomItem={{\n                      content: cellItem,\n                      positionX: cellIndex,\n                      positionY: rowIndex,\n                    }}\n                    {...{gameMap, gameMapWidth, gameMapHeight}}\n                  />\n  \n                : <></>\n              ))}\n              </div>\n            ))}\n\n            <p><a href=\"https://teo.jacon.cz/\">zpet na uvodni stranku</a></p>\n\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}