{"ast":null,"code":"var _jsxFileName = \"/Users/tedy/game/src/App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const isEmpty = \"o\";\n  const hasPerson = \"x\";\n  const theEnd = \".\";\n  const [gameMap, setGameMap] = useState([[hasPerson, isEmpty, isEmpty], [isEmpty, isEmpty, isEmpty], [isEmpty, isEmpty, isEmpty], [isEmpty, isEmpty, isEmpty]]);\n  const gamePlan = `\n@##########  #\n#   #   #    #\n########### ##\n#  #   #     #\n## #   ###X###\n`;\n  console.log(gamePlan);\n  const [actualPositionOfPersonX, setActualPositionOfPersonX] = useState(0);\n  const [actualPositionOfPersonY, setActualPositionOfPersonY] = useState(0);\n\n  const parseStringToGameMap = gamePlan => {\n    let rows = gamePlan.split(\"\\n\"); // console.log(\"rows\", rows);\n\n    rows = rows.map(rowItem => {\n      return;\n      rowItem.split(\"\").map(cellItem => {\n        if (cellItem === \" \") {\n          return isEmpty;\n        } else if (cellItem === \"@\") {\n          return hasPerson;\n        } else if (cellItem === \"#\") {\n          return isEmpty;\n        } else if (cellItem === \"X\") {\n          return theEnd;\n        }\n      });\n    });\n    console.log(\"final rows\", rows);\n    return [];\n  };\n\n  console.log(parseStringToGameMap(gamePlan)); // console.log(gameMap);\n\n  const handleMovePerson = (rowIndexToChecked, cellIndexToChecked) => {\n    if (!isAllowedMove(rowIndexToChecked, cellIndexToChecked)) {\n      return;\n    }\n\n    setActualPositionOfPersonX(cellIndexToChecked);\n    setActualPositionOfPersonX(rowIndexToChecked);\n    const highestCoords = 0;\n    setActualPositionOfPersonX(cellIndexToChecked);\n    setActualPositionOfPersonY(rowIndexToChecked);\n    const test = gameMap.map((rowItem, rowIndex) => rowItem.map((cellItem, cellIndex) => {\n      if (rowIndexToChecked === rowIndex && cellIndexToChecked === cellIndex) {\n        return hasPerson;\n      } else {\n        return isEmpty;\n      }\n    }));\n    setGameMap(test);\n  };\n\n  const isAllowedMove = (rowIndexToChecked, cellIndexToChecked) => {\n    return (actualPositionOfPersonX - 1 === cellIndexToChecked || actualPositionOfPersonX + 1 === cellIndexToChecked) && actualPositionOfPersonY === rowIndexToChecked || (actualPositionOfPersonY - 1 === rowIndexToChecked || actualPositionOfPersonY + 1 === rowIndexToChecked) && actualPositionOfPersonX === cellIndexToChecked;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, \"panacek je na pozici \", actualPositionOfPersonY, \", \", actualPositionOfPersonX), \"//      \", /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, \" suradnice voravo dole \", highestCoordsY, \" \", highestCoordsX), /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, gameMap.map((rowItem, rowIndex) => /*#__PURE__*/React.createElement(\"tr\", {\n    key: rowIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 46\n    }\n  }, rowItem.map((cellItem, cellIndex) => /*#__PURE__*/React.createElement(\"td\", {\n    key: cellIndex,\n    onClick: e => handleMovePerson(rowIndex, cellIndex),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, cellItem, \"-\", rowIndex, \",\", cellIndex)))))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/tedy/game/src/App.js"],"names":["React","useState","App","isEmpty","hasPerson","theEnd","gameMap","setGameMap","gamePlan","console","log","actualPositionOfPersonX","setActualPositionOfPersonX","actualPositionOfPersonY","setActualPositionOfPersonY","parseStringToGameMap","rows","split","map","rowItem","cellItem","handleMovePerson","rowIndexToChecked","cellIndexToChecked","isAllowedMove","highestCoords","test","rowIndex","cellIndex","highestCoordsY","highestCoordsX","e"],"mappings":"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","sourcesContent":["import React,  {useState} from 'react';\nimport './App.css';\n\nfunction App() {\n  const isEmpty = \"o\";\n  const hasPerson = \"x\";\n  const theEnd = \".\"\n\n  const [gameMap, setGameMap] = useState(\n    [\n    [hasPerson, isEmpty, isEmpty],\n    [isEmpty, isEmpty, isEmpty],\n    [isEmpty, isEmpty, isEmpty],\n    [isEmpty, isEmpty, isEmpty],\n   ]\n  );\n\n  const gamePlan = `\n@##########  #\n#   #   #    #\n########### ##\n#  #   #     #\n## #   ###X###\n`;\n\n\n  console.log(gamePlan);\n\n  const [actualPositionOfPersonX, setActualPositionOfPersonX] = useState(0);\n  const [actualPositionOfPersonY, setActualPositionOfPersonY] = useState(0);\n\n\n  const parseStringToGameMap = (gamePlan) => {\n\n    let rows = gamePlan.split(\"\\n\");\n    // console.log(\"rows\", rows);\n    rows = rows.map(rowItem => {\n      return \n        rowItem.split(\"\")\n        .map(cellItem => {\n          if (cellItem === \" \") {return isEmpty}\n          else if (cellItem === \"@\") {return hasPerson}\n          else if (cellItem === \"#\") {return isEmpty}\n          else if (cellItem === \"X\") {return theEnd}\n\n        });\n    });\n\n\n    console.log(\"final rows\", rows);\n    return [];\n  }\n\n\n  console.log(parseStringToGameMap(gamePlan));\n\n\n\n  // console.log(gameMap);\n\n  const handleMovePerson = (rowIndexToChecked, cellIndexToChecked) => {\n    if(!isAllowedMove(rowIndexToChecked, cellIndexToChecked)) {return;}\n    \n    setActualPositionOfPersonX(cellIndexToChecked);\n    setActualPositionOfPersonX(rowIndexToChecked);\n    const highestCoords = 0\n\n    setActualPositionOfPersonX(cellIndexToChecked);\n    setActualPositionOfPersonY(rowIndexToChecked);\n    const test = gameMap.map((rowItem, rowIndex) => (\n      rowItem.map((cellItem, cellIndex) => {\n        if(rowIndexToChecked === rowIndex && cellIndexToChecked === cellIndex) {\n          return hasPerson;\n          } else {return isEmpty}\n      })\n    ));\n   setGameMap(test);\n\n  }\n\n\n  const isAllowedMove = (rowIndexToChecked, cellIndexToChecked) => {\n    return (\n      (\n        ( actualPositionOfPersonX - 1 === cellIndexToChecked || actualPositionOfPersonX + 1 === cellIndexToChecked )\n        && ( actualPositionOfPersonY === rowIndexToChecked )\n      )\n      || (\n        ( actualPositionOfPersonY - 1 === rowIndexToChecked || actualPositionOfPersonY + 1 === rowIndexToChecked )\n        && ( actualPositionOfPersonX === cellIndexToChecked )\n        )\n      );\n  }\n\n\n  return (\n    <div className=\"App\">\n      <p>panacek je na pozici {actualPositionOfPersonY}, {actualPositionOfPersonX}</p>\n//      <p> suradnice voravo dole {highestCoordsY} {highestCoordsX}</p>\n        <table>\n          <tbody>\n        {gameMap.map((rowItem, rowIndex) => (<tr key={rowIndex}>\n          {rowItem.map((cellItem, cellIndex) => (\n            <td\n              key={cellIndex}\n              onClick={e=>handleMovePerson(rowIndex, cellIndex)}\n              >\n                {cellItem}-{rowIndex},{cellIndex}\n            </td>\n          ))}\n        </tr>\n        ))}\n          </tbody>\n        </table>\n    </div>\n  );\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}